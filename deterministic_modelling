{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2a40e948",
   "metadata": {},
   "source": [
    "# QUESTION 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65a135fb",
   "metadata": {},
   "source": [
    "# Importing Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "163d5eda",
   "metadata": {},
   "source": [
    "Before all else, the data must be properly import, in this case, through the use of `pandas.read_csv()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "39120201",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# define a function for code reproducability later one (more seasons, inclusion of more pitch types, etc.)\n",
    "def read_data(path):\n",
    "    '''\n",
    "    Reads in csv files for a given absolute or relative path.\n",
    "    '''\n",
    "    try:\n",
    "        df = pd.read_csv(path)\n",
    "        return df\n",
    "    except FileNotFoundError as e:\n",
    "        print(f'{e}\\nRerun with an existing filename.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7b148955",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = read_data('Q1_pitches_train.csv')\n",
    "test = read_data('Q1_pitches_test.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51ca3368",
   "metadata": {},
   "source": [
    "And view the first few rows of the dataframes to ensure error-free imports: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "46efba2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>347</td>\n",
       "      <td>1304</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>269</td>\n",
       "      <td>1661</td>\n",
       "      <td>2052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>FT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>1048</td>\n",
       "      <td>2029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "      <td>1521</td>\n",
       "      <td>2049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>SL</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>460</td>\n",
       "      <td>1100</td>\n",
       "      <td>2050</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb pitch_type  \\\n",
       "0       3          0      1        0            1       0       1         FF   \n",
       "1       1          0      2        2            2       1       0         FF   \n",
       "2       2          1      0        0            0       0       0         FT   \n",
       "3       7          0      0        0            1       0       0         FF   \n",
       "4       7          1      0        0            2       1       1         SL   \n",
       "\n",
       "   bat_score_before  field_score  basecode_before  batterid  pitcherid   cid  \n",
       "0                 0            1                0       347       1304  2014  \n",
       "1                 0            0                0       269       1661  2052  \n",
       "2                 0            0                0        43       1048  2029  \n",
       "3                 5            1                1        98       1521  2049  \n",
       "4                 6            1                1       460       1100  2050  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bbf05101",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>FF</th>\n",
       "      <th>FT</th>\n",
       "      <th>CB</th>\n",
       "      <th>SL</th>\n",
       "      <th>CH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>2000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb  \\\n",
       "0       9          1      0        0            0       0       1   \n",
       "1       9          0      0        0            2       0       0   \n",
       "2       9          0      1        1            1       0       0   \n",
       "3       9          0      0        2            0       0       0   \n",
       "4       9          0      1        2            0       0       0   \n",
       "\n",
       "   bat_score_before  field_score  basecode_before  batterid  pitcherid   cid  \\\n",
       "0                 2            4                0         1       1000  2000   \n",
       "1                 4            2                0         2       1001  2001   \n",
       "2                 4            2                0         3       1001  2001   \n",
       "3                 4            2                0         4       1001  2001   \n",
       "4                 4            2                0         4       1001  2001   \n",
       "\n",
       "   FF  FT  CB  SL  CH  \n",
       "0 NaN NaN NaN NaN NaN  \n",
       "1 NaN NaN NaN NaN NaN  \n",
       "2 NaN NaN NaN NaN NaN  \n",
       "3 NaN NaN NaN NaN NaN  \n",
       "4 NaN NaN NaN NaN NaN  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef1e064b",
   "metadata": {},
   "source": [
    "Looks good! Some potential issues that could arise with this method include an unconventional delimiter (tab | ;) or an incorrect index column."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bed10d91",
   "metadata": {},
   "source": [
    "# Exploratory Analysis -  Value Interpretation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6197d1eb",
   "metadata": {},
   "source": [
    "There are some columns that are easy to understand by just observation like `inning`, `balls`, `strikes`, or `outs_before`. Yet some remain obscure like `basecode_before` or `cid`. Further analysis is needed, namely viewing using `df.info()` to view the data-types, as well as other key attributes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0f58dd46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 480915 entries, 0 to 480914\n",
      "Data columns (total 14 columns):\n",
      " #   Column            Non-Null Count   Dtype \n",
      "---  ------            --------------   ----- \n",
      " 0   inning            480915 non-null  int64 \n",
      " 1   is_bottom         480915 non-null  int64 \n",
      " 2   balls             480915 non-null  int64 \n",
      " 3   strikes           480915 non-null  int64 \n",
      " 4   outs_before       480915 non-null  int64 \n",
      " 5   is_lhp            480915 non-null  int64 \n",
      " 6   is_lhb            480915 non-null  int64 \n",
      " 7   pitch_type        480915 non-null  object\n",
      " 8   bat_score_before  480915 non-null  int64 \n",
      " 9   field_score       480915 non-null  int64 \n",
      " 10  basecode_before   480915 non-null  int64 \n",
      " 11  batterid          480915 non-null  int64 \n",
      " 12  pitcherid         480915 non-null  int64 \n",
      " 13  cid               480915 non-null  int64 \n",
      "dtypes: int64(13), object(1)\n",
      "memory usage: 51.4+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d58408ae",
   "metadata": {},
   "source": [
    "There are 480,915 rows (pitches) with 13 columns, all of type int64 (numeric w/ 64 bit capacity) except `pitch_type` which is of type object (string). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "58ec7168",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pitch_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SL</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  pitch_type\n",
       "0         FF\n",
       "1         FF\n",
       "2         FT\n",
       "3         FF\n",
       "4         SL"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.select_dtypes(include = \"object\").head() # strings"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e20f7f11",
   "metadata": {},
   "source": [
    "The column `pitch_type` is the only non-numerical data-type and happens to be the label for this classification problem (i.e. aiming to predict pitch type)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ef7a2c18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>347</td>\n",
       "      <td>1304</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>269</td>\n",
       "      <td>1661</td>\n",
       "      <td>2052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>1048</td>\n",
       "      <td>2029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "      <td>1521</td>\n",
       "      <td>2049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>460</td>\n",
       "      <td>1100</td>\n",
       "      <td>2050</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb  \\\n",
       "0       3          0      1        0            1       0       1   \n",
       "1       1          0      2        2            2       1       0   \n",
       "2       2          1      0        0            0       0       0   \n",
       "3       7          0      0        0            1       0       0   \n",
       "4       7          1      0        0            2       1       1   \n",
       "\n",
       "   bat_score_before  field_score  basecode_before  batterid  pitcherid   cid  \n",
       "0                 0            1                0       347       1304  2014  \n",
       "1                 0            0                0       269       1661  2052  \n",
       "2                 0            0                0        43       1048  2029  \n",
       "3                 5            1                1        98       1521  2049  \n",
       "4                 6            1                1       460       1100  2050  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.select_dtypes(include = 'int64').head() # numerical data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27d29176",
   "metadata": {},
   "source": [
    "All of these numerical columns include information about the gamestate of the given pitch. In this way, though these are numerical figures, they have categorical meanings that are encoded. It is key to understand that by nature, this is a fundamentally different modeling problem than identifying a pitch given a certain spinrate or movement pattern. Instead, this model should predict the highest likelihoods for facing a pitch given the in game situation, with no relevant information about the pitch itself."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fc919c6",
   "metadata": {},
   "source": [
    "### Feature Domains"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6897aa11",
   "metadata": {},
   "source": [
    "It is imperative to understand all the possible values that columns can take on:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b35017c1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inning               19\n",
      "is_bottom             2\n",
      "balls                 4\n",
      "strikes               3\n",
      "outs_before           3\n",
      "is_lhp                2\n",
      "is_lhb                2\n",
      "pitch_type            5\n",
      "bat_score_before     23\n",
      "field_score          23\n",
      "basecode_before       8\n",
      "batterid            988\n",
      "pitcherid           830\n",
      "cid                 113\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(train.nunique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d02daaec",
   "metadata": {},
   "source": [
    "Immediately, there are assumptions that can be made about the domains of a few of the aforementioned more straightforward variables:\n",
    "\n",
    "   - **inning**: the inning of the pitch - [1,20]\n",
    "   - **is_bottom**: bottom/top half inning - binary {0,1}\n",
    "   - **balls**, **strikes**, **outs_before**: gamestate before pitch - [0,3], [0,2], [0,2]\n",
    "   - **is_lhp**, **is_lhb**: handedness of pitcher and batter - both binary {0,1},{0,1}\n",
    "   - **bat_score_before**, **field_score**: score of teams before pitch - [0,22], [0,22]\n",
    "   - **pitch_type** (label): type of pitch thrown - {**'FF' = 4-seamer**,**'SL' = slider** ,**'FT' = 2-seamer**,**'CH' = changeup**,**'CB' = curveball**}\n",
    "   - **batterid**, **pitcherid**, **cid**: keys for identification\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69cea94b",
   "metadata": {},
   "source": [
    "And visualization of their distributions..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3fca1cc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# define a function for code reuse\n",
    "def visualize_col_domains(col, df,c):\n",
    "    \"\"\"\n",
    "    Visualizes categorical columns of a dataframe\n",
    "    Parameters:\n",
    "    col (str): the column name of the passed in dataframe\n",
    "    df (DataFrame): the DataFrame to visualize cols\n",
    "    \"\"\"\n",
    "    color = 'blue' \n",
    "    if c%2 == 0: \n",
    "        color = 'orange'\n",
    "    plt.bar(df[col].value_counts().keys(), df[col].value_counts().values, color =color) # mets colors\n",
    "    plt.xticks(ticks = np.arange(0,len(df[col].value_counts())), labels = df[col].value_counts().keys(),rotation = 45) # set ticks to be range, with labels of the index of value counts\n",
    "    plt.xlabel(col)\n",
    "    plt.ylabel('Count')\n",
    "    plt.title(f'Counts of Categorical Column: {col}')\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c23e1ab",
   "metadata": {},
   "source": [
    "For the sake of practicality, it is important to limit the graphs to columns with a reasonable amount of possible values (excluding the id's). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b1887878",
   "metadata": {},
   "outputs": [],
   "source": [
    "reasonable_domains = []\n",
    "for col in train.columns:\n",
    "    if(len(train[col].value_counts()) <= 23): # excluding ids, including all other columns\n",
    "        reasonable_domains.append(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bfcdf815",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['inning',\n",
       " 'is_bottom',\n",
       " 'balls',\n",
       " 'strikes',\n",
       " 'outs_before',\n",
       " 'is_lhp',\n",
       " 'is_lhb',\n",
       " 'pitch_type',\n",
       " 'bat_score_before',\n",
       " 'field_score',\n",
       " 'basecode_before']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reasonable_domains"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "709690fd",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x2520 with 11 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize =(20,35))\n",
    "for i in range(1,len(reasonable_domains)+1):\n",
    "    plt.subplot(6,2,i)\n",
    "    visualize_col_domains(reasonable_domains[i-1],train,i)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d549b77",
   "metadata": {},
   "source": [
    "This data mirrors their likely rate of occurences in MLB games: innings remain constant for innings 1 through 9 then decrease for each extra inning, most pitchers and hitters are righties, and more 0 strike 0 ball and 0-0 score pitches.\n",
    "\n",
    "The most influential visualization is of the labels - pitch type. Again following this real-world based hypothesis, one would expect the most 4-seam fastballs. This is the case, and it signifies that any model will 'learn' the gamestates that signify a fastball the closest. Subsequent accuracy analysis should display this. FOr that reason, only an equal sample of each pitch type will be used for training, with around 50,000 samples of each (least common pitch - CB samples). This will be done later before model selection."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e9a1313",
   "metadata": {},
   "source": [
    "So, there remains a column that are harder to understand: `basecode_before`.\n",
    "\n",
    "Upon reflection, this basecode figure is encoded  representing the positioning of runners on base at the time the pitch is thrown. It can be inferred it can be decoded as follows: \n",
    "- 0: bases empty\n",
    "- 1: (man on) 1st\n",
    "- 2: 2nd\n",
    "- 3: 3rd\n",
    "- 4: 1st and 2nd\n",
    "- 5: 1st and 3rd\n",
    "- 6: 2nd and 3rd\n",
    "- 7: bases loaded\n",
    "\n",
    "This conclusion fits the narrative of the visualization above. The most pitches take place with the bases empty, with far less coming with any configuration of baserunners."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42d93ea4",
   "metadata": {},
   "source": [
    "Although the training set data is fully investigated, this must be compared with the test set, which could have extraneous columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b28bc8d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 160306 entries, 0 to 160305\n",
      "Data columns (total 18 columns):\n",
      " #   Column            Non-Null Count   Dtype  \n",
      "---  ------            --------------   -----  \n",
      " 0   inning            160306 non-null  int64  \n",
      " 1   is_bottom         160306 non-null  int64  \n",
      " 2   balls             160306 non-null  int64  \n",
      " 3   strikes           160306 non-null  int64  \n",
      " 4   outs_before       160306 non-null  int64  \n",
      " 5   is_lhp            160306 non-null  int64  \n",
      " 6   is_lhb            160306 non-null  int64  \n",
      " 7   bat_score_before  160306 non-null  int64  \n",
      " 8   field_score       160306 non-null  int64  \n",
      " 9   basecode_before   160306 non-null  int64  \n",
      " 10  batterid          160306 non-null  int64  \n",
      " 11  pitcherid         160306 non-null  int64  \n",
      " 12  cid               160306 non-null  int64  \n",
      " 13  FF                0 non-null       float64\n",
      " 14  FT                0 non-null       float64\n",
      " 15  CB                0 non-null       float64\n",
      " 16  SL                0 non-null       float64\n",
      " 17  CH                0 non-null       float64\n",
      "dtypes: float64(5), int64(13)\n",
      "memory usage: 22.0 MB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f940c39",
   "metadata": {},
   "source": [
    "There are 160,306 test pitches, significantly less than the training pitches. \n",
    "\n",
    "There are some columns present in the testing set, that are not in the training set (and vice-versa)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4383ae23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column 'pitch_type' in train data but not test data.\n",
      "Column 'FF' in test data but not train data.\n",
      "Column 'FT' in test data but not train data.\n",
      "Column 'CB' in test data but not train data.\n",
      "Column 'SL' in test data but not train data.\n",
      "Column 'CH' in test data but not train data.\n"
     ]
    }
   ],
   "source": [
    "for col in train.columns:\n",
    "    if col not in test.columns:\n",
    "        print(f\"Column '{col}' in train data but not test data.\")\n",
    "\n",
    "for col in test.columns:\n",
    "    if col not in train.columns:\n",
    "        print(f\"Column '{col}' in test data but not train data.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12912fa5",
   "metadata": {},
   "source": [
    "The first of these discrepencies is trivial: the label SHOULD be absent from the test data. The only other differences are the names of pitch types, which become more comprehensible when viewed below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bbd09db5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FF</th>\n",
       "      <th>FT</th>\n",
       "      <th>CB</th>\n",
       "      <th>SL</th>\n",
       "      <th>CH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160301</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160302</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160303</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160304</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160305</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>160306 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        FF  FT  CB  SL  CH\n",
       "0      NaN NaN NaN NaN NaN\n",
       "1      NaN NaN NaN NaN NaN\n",
       "2      NaN NaN NaN NaN NaN\n",
       "3      NaN NaN NaN NaN NaN\n",
       "4      NaN NaN NaN NaN NaN\n",
       "...     ..  ..  ..  ..  ..\n",
       "160301 NaN NaN NaN NaN NaN\n",
       "160302 NaN NaN NaN NaN NaN\n",
       "160303 NaN NaN NaN NaN NaN\n",
       "160304 NaN NaN NaN NaN NaN\n",
       "160305 NaN NaN NaN NaN NaN\n",
       "\n",
       "[160306 rows x 5 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test[['FF','FT','CB','SL','CH']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fd2266f",
   "metadata": {},
   "source": [
    "These columns prove to be placeholders for the required format of the output. The predictions \n",
    "should mirror the pattern typical of a dummy variable instead of in a single column. A dummy variable is typically used to explode a categorical variable by having separate columns for each possible output, with 0's for the absense and 1 for the presence. "
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "9edfa6a7",
   "metadata": {},
   "source": [
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3ebba7a",
   "metadata": {},
   "source": [
    "This output requirement should be noted and model predictions should fill these columns."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "908f5ede",
   "metadata": {},
   "source": [
    "### Duplicate Check"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2234acbc",
   "metadata": {},
   "source": [
    "It is imperative to discern potential duplicated entries when working with an unknown data source."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "10b999c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_dupes(df):\n",
    "    if (df.duplicated().sum() == 0): # duplicated () checks each row for dupe, if sum of booleans == 0 -> all false\n",
    "        print(\"No row is a duplicate entry.\")\n",
    "    else:\n",
    "        print(\"There is at least one duplicate entry.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "76a4d6bc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is at least one duplicate entry.\n",
      "There is at least one duplicate entry.\n"
     ]
    }
   ],
   "source": [
    "check_dupes(train)\n",
    "check_dupes(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1368c6b2",
   "metadata": {},
   "source": [
    "There proves to be duplicate pitches present in the dataset for both training and testing pitches. This makes sense, however, due to the categorical nature of all features. Two duplicate entries can simply occur in the following scenerio: the same 2 strike pitch after a foul within the same at bat."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "279962b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>269</td>\n",
       "      <td>1661</td>\n",
       "      <td>2052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SL</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>220</td>\n",
       "      <td>1254</td>\n",
       "      <td>2071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>127</td>\n",
       "      <td>1441</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>88</td>\n",
       "      <td>1499</td>\n",
       "      <td>2043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>446</td>\n",
       "      <td>1287</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480779</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SL</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>596</td>\n",
       "      <td>1451</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480825</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>SL</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>244</td>\n",
       "      <td>1288</td>\n",
       "      <td>2071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480836</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>SL</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>1082</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480896</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SL</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>171</td>\n",
       "      <td>1122</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480909</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142</td>\n",
       "      <td>1181</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19413 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb  \\\n",
       "1            1          0      2        2            2       1       0   \n",
       "62           8          1      1        2            1       0       0   \n",
       "69           9          0      3        2            2       1       0   \n",
       "146          5          0      2        2            0       1       0   \n",
       "153          6          0      2        2            1       1       0   \n",
       "...        ...        ...    ...      ...          ...     ...     ...   \n",
       "480779       9          1      1        2            0       0       0   \n",
       "480825       7          1      3        2            1       1       0   \n",
       "480836       7          0      3        2            2       0       1   \n",
       "480896       2          1      1        2            1       0       0   \n",
       "480909       1          0      0        1            0       1       0   \n",
       "\n",
       "       pitch_type  bat_score_before  field_score  basecode_before  batterid  \\\n",
       "1              FF                 0            0                0       269   \n",
       "62             SL                 1            0                0       220   \n",
       "69             FF                 6            2                4       127   \n",
       "146            FF                 0            4                0        88   \n",
       "153            FF                 4            0                0       446   \n",
       "...           ...               ...          ...              ...       ...   \n",
       "480779         SL                 0            3                1       596   \n",
       "480825         SL                 2            6                0       244   \n",
       "480836         SL                 1            2                0        45   \n",
       "480896         SL                 0            0                6       171   \n",
       "480909         FF                 0            0                0       142   \n",
       "\n",
       "        pitcherid   cid  \n",
       "1            1661  2052  \n",
       "62           1254  2071  \n",
       "69           1441  2025  \n",
       "146          1499  2043  \n",
       "153          1287  2009  \n",
       "...           ...   ...  \n",
       "480779       1451  2003  \n",
       "480825       1288  2071  \n",
       "480836       1082  2008  \n",
       "480896       1122  2003  \n",
       "480909       1181  2018  \n",
       "\n",
       "[19413 rows x 14 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dupes = train[train.duplicated(keep=False)]\n",
    "dupes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "416ed1a8",
   "metadata": {},
   "source": [
    "This is only a modicum of total pitches in the training set (19,413 of over 480,000), however, it is nonetheless important to account for their presence."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c7e8313",
   "metadata": {},
   "source": [
    "For illustration, view the first duplicatated pitch (which happens to be of index 1)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fffb8565",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>269</td>\n",
       "      <td>1661</td>\n",
       "      <td>2052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84191</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>269</td>\n",
       "      <td>1661</td>\n",
       "      <td>2052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb  \\\n",
       "1           1          0      2        2            2       1       0   \n",
       "84191       1          0      2        2            2       1       0   \n",
       "\n",
       "      pitch_type  bat_score_before  field_score  basecode_before  batterid  \\\n",
       "1             FF                 0            0                0       269   \n",
       "84191         FF                 0            0                0       269   \n",
       "\n",
       "       pitcherid   cid  \n",
       "1           1661  2052  \n",
       "84191       1661  2052  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dupes.loc[((train['pitcherid'] == dupes.loc[1,'pitcherid']) \\\n",
    "           & (train['batterid'] == dupes.loc[1,'batterid']))]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26959f9c",
   "metadata": {},
   "source": [
    "It is very plausible that this duplicate is simply repeated fastballs on a 0-2 count when the first one is fouled off. To narrow the search for potential true duplicates, we can view the non-two strike instances.\n",
    "\n",
    "These are bound to be rarer, as they are required to happen in separate games. Still, within divisional rivalries, pitchers can face an opposing batter multiple times a season with identical gamestates. The vast majority occurring with SP against 1, 2 or 3 hitters in the lineup (i.e. 0-0 top 1st/bottom 1st)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0ab38490",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>309</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1012</td>\n",
       "      <td>2002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1541</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>506</td>\n",
       "      <td>1416</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2162</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>430</td>\n",
       "      <td>1500</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2238</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>CB</td>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>142</td>\n",
       "      <td>1756</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4395</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>544</td>\n",
       "      <td>1654</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>476607</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330</td>\n",
       "      <td>1256</td>\n",
       "      <td>2049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>478670</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>CH</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>460</td>\n",
       "      <td>1059</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480247</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>CB</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>76</td>\n",
       "      <td>1048</td>\n",
       "      <td>2029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480599</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>182</td>\n",
       "      <td>1279</td>\n",
       "      <td>2054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480909</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142</td>\n",
       "      <td>1181</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>316 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb  \\\n",
       "309          1          0      1        0            1       1       0   \n",
       "1541         1          0      0        0            0       0       1   \n",
       "2162         1          0      0        1            0       0       1   \n",
       "2238         9          0      0        1            2       0       0   \n",
       "4395         2          1      0        0            1       0       1   \n",
       "...        ...        ...    ...      ...          ...     ...     ...   \n",
       "476607       1          0      0        0            0       0       0   \n",
       "478670       4          1      0        1            0       1       1   \n",
       "480247       1          1      0        0            1       0       1   \n",
       "480599       1          1      0        0            0       0       1   \n",
       "480909       1          0      0        1            0       1       0   \n",
       "\n",
       "       pitch_type  bat_score_before  field_score  basecode_before  batterid  \\\n",
       "309            FT                 0            0                0         7   \n",
       "1541           FF                 0            0                0       506   \n",
       "2162           FF                 0            0                0       430   \n",
       "2238           CB                19            4                1       142   \n",
       "4395           FF                 0            0                0       544   \n",
       "...           ...               ...          ...              ...       ...   \n",
       "476607         FF                 0            0                0       330   \n",
       "478670         CH                 1            2                0       460   \n",
       "480247         CB                 0            0                2        76   \n",
       "480599         FF                 0            0                0       182   \n",
       "480909         FF                 0            0                0       142   \n",
       "\n",
       "        pitcherid   cid  \n",
       "309          1012  2002  \n",
       "1541         1416  2003  \n",
       "2162         1500  2009  \n",
       "2238         1756  2015  \n",
       "4395         1654  2020  \n",
       "...           ...   ...  \n",
       "476607       1256  2049  \n",
       "478670       1059  2018  \n",
       "480247       1048  2029  \n",
       "480599       1279  2054  \n",
       "480909       1181  2018  \n",
       "\n",
       "[316 rows x 14 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dupes.loc[dupes['strikes'] != 2]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f52425d",
   "metadata": {},
   "source": [
    "Now only a fraction (316 of 480,000)! \n",
    "\n",
    "Viewing the first indexed dupe..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9cf3d66a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>309</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1012</td>\n",
       "      <td>2002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31169</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1012</td>\n",
       "      <td>2002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52944</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1012</td>\n",
       "      <td>2002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97483</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1012</td>\n",
       "      <td>2002</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb  \\\n",
       "309         1          0      1        0            1       1       0   \n",
       "31169       1          0      0        0            1       1       0   \n",
       "52944       1          0      1        0            1       1       0   \n",
       "97483       1          0      0        0            1       1       0   \n",
       "\n",
       "      pitch_type  bat_score_before  field_score  basecode_before  batterid  \\\n",
       "309           FT                 0            0                0         7   \n",
       "31169         FT                 0            0                0         7   \n",
       "52944         FT                 0            0                0         7   \n",
       "97483         FT                 0            0                0         7   \n",
       "\n",
       "       pitcherid   cid  \n",
       "309         1012  2002  \n",
       "31169       1012  2002  \n",
       "52944       1012  2002  \n",
       "97483       1012  2002  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dupes.loc[((train['pitcherid'] == dupes.loc[309,'pitcherid']) & (train['batterid'] == dupes.loc[309,'batterid']))]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d8f1a57",
   "metadata": {},
   "source": [
    "Once the gamestate advances past the first few innings, it becomes exponentially more unlikely that these persistent duplicates would be due to their actual occurrences, rather than an error in data entry or engineering. Now, these pitches can be sorted out. The logic to identify these will be to filter entries when either team had a run or more."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ed2b1cfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2238</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>CB</td>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>142</td>\n",
       "      <td>1756</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101437</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>FF</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1215</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150866</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>CH</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>460</td>\n",
       "      <td>1059</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>225857</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>132</td>\n",
       "      <td>1209</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>227657</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SL</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>188</td>\n",
       "      <td>1178</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>256719</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>FF</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>293</td>\n",
       "      <td>1281</td>\n",
       "      <td>2100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320203</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>FF</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1215</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>332079</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SL</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>188</td>\n",
       "      <td>1178</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>343587</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>CB</td>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>142</td>\n",
       "      <td>1756</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>355173</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>FF</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>293</td>\n",
       "      <td>1281</td>\n",
       "      <td>2100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>446109</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>132</td>\n",
       "      <td>1209</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>478670</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>CH</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>460</td>\n",
       "      <td>1059</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb  \\\n",
       "2238         9          0      0        1            2       0       0   \n",
       "101437       8          0      1        1            0       0       1   \n",
       "150866       4          1      0        1            0       1       1   \n",
       "225857       5          0      0        0            0       0       0   \n",
       "227657       9          0      0        1            0       0       0   \n",
       "256719       8          1      0        0            0       0       1   \n",
       "320203       8          0      1        1            0       0       1   \n",
       "332079       9          0      0        1            0       0       0   \n",
       "343587       9          0      0        1            2       0       0   \n",
       "355173       8          1      0        0            0       0       1   \n",
       "446109       5          0      0        0            0       0       0   \n",
       "478670       4          1      0        1            0       1       1   \n",
       "\n",
       "       pitch_type  bat_score_before  field_score  basecode_before  batterid  \\\n",
       "2238           CB                19            4                1       142   \n",
       "101437         FF                 5            7                0         1   \n",
       "150866         CH                 1            2                0       460   \n",
       "225857         FF                 1            1                0       132   \n",
       "227657         SL                 1            2                0       188   \n",
       "256719         FF                10            1                0       293   \n",
       "320203         FF                 5            7                0         1   \n",
       "332079         SL                 1            2                0       188   \n",
       "343587         CB                19            4                1       142   \n",
       "355173         FF                10            1                0       293   \n",
       "446109         FF                 1            1                0       132   \n",
       "478670         CH                 1            2                0       460   \n",
       "\n",
       "        pitcherid   cid  \n",
       "2238         1756  2015  \n",
       "101437       1215  2000  \n",
       "150866       1059  2018  \n",
       "225857       1209  2017  \n",
       "227657       1178  2007  \n",
       "256719       1281  2100  \n",
       "320203       1215  2000  \n",
       "332079       1178  2007  \n",
       "343587       1756  2015  \n",
       "355173       1281  2100  \n",
       "446109       1209  2017  \n",
       "478670       1059  2018  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unlikely_dupes  = dupes.loc[((dupes['strikes'] != 2) &\\\n",
    "            (dupes['inning'] != 1) &\\\n",
    "             (dupes['bat_score_before'] >=1) & \\\n",
    "              (dupes['field_score']>=1))]\n",
    "unlikely_dupes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "133451f5",
   "metadata": {},
   "source": [
    "It is these few duplicates that are bound to push the limit of what is possible in repeated gamestates, with particularly egregious 19-4 repeats. For this reason, it is fair to assume these are true duplicates that need to be handled. Therefore, only the first instances of these will be counted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f688db5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "unlikely_dupes.drop_duplicates(keep = 'last') # to drop\n",
    "index_to_drop = unlikely_dupes.index # get indeces to drop\n",
    "\n",
    "length_before = len(train) # original length\n",
    "train.drop(index = index_to_drop,inplace=True, axis = 0) # proceed with drop\n",
    "train.reset_index(inplace = True,drop = True) # reset index to avoid gaps \n",
    "\n",
    "assert (len(train) + len(index_to_drop) == length_before) # assertion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e0fc28f",
   "metadata": {},
   "source": [
    "It is unnecessary to account for repeats in the test data, as this has no influence over the model. The only thing that would result from repeated test pitches, is the same prediction. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56739dba",
   "metadata": {},
   "source": [
    "### Null Check"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8095a790",
   "metadata": {},
   "source": [
    "Now, a final null check..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b81b382d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_nulls(df):\n",
    "    if(train.isna().sum().sum() == 0):\n",
    "        print(\"No row contains a null or NaN value.\")\n",
    "    else:\n",
    "        print(\"There is a null or NaN value in this table.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e3999daf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No row contains a null or NaN value.\n",
      "No row contains a null or NaN value.\n"
     ]
    }
   ],
   "source": [
    "check_nulls(train) # passes\n",
    "check_nulls(test) # passes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad14aef0",
   "metadata": {},
   "source": [
    "### Preventing Multicolinearity\n",
    "\n",
    "The last step before model training is to check for multicolinearity. Colinearity can be seen as the propensity to which two independent, predictor variables have a linear relationship each other. When this occurs, it is impossible to measure what is affecting the dependent variable, and leads to an increased p-value for each coefficient. This signifies decreased statistical significance of the findings.\n",
    "\n",
    "There are many ways to allieviate this, but perhaps the most simple, is to drop one of a colinear pair of variables. This should be done carefully and key features should be preserved. To judge for colinearity, a view of the correlation pairs of each feature are displayed below.\n",
    "\n",
    "\n",
    "\n",
    "Given the amount of features, the lack of extreme colinearity bodes well for modelling. The highest correlation between features is inning's correlation with the team scores. This is quite obvious, as more runs will be scored as the inning number increases.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1b21975f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "corr = train.corr()\n",
    "plt.figure(figsize = (10,10))\n",
    "sns.heatmap(corr.round(2), vmax = 1, vmin = -1, center = 0, annot =True, cmap = 'coolwarm')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44b6819b",
   "metadata": {},
   "source": [
    "Given the amount of features, the lack of colinearity bodes well for modelling. The highest correlation between features is inning's correlation with the team scores. This is quite obvious, as more runs will be scored as the inning number increases. Still, this is not an extremely significant correlation and, thus, no action should be taken."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b908a038",
   "metadata": {},
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4ab2842",
   "metadata": {},
   "source": [
    "### Feature Selection"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c6840f5",
   "metadata": {},
   "source": [
    "Before any models are selected and trained, it is necessary to distinguish useful columns to be features in the models from others.\n",
    "\n",
    "Let's take another look at the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d8cd766f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>347</td>\n",
       "      <td>1304</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>269</td>\n",
       "      <td>1661</td>\n",
       "      <td>2052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>FT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>1048</td>\n",
       "      <td>2029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "      <td>1521</td>\n",
       "      <td>2049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>SL</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>460</td>\n",
       "      <td>1100</td>\n",
       "      <td>2050</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb pitch_type  \\\n",
       "0       3          0      1        0            1       0       1         FF   \n",
       "1       1          0      2        2            2       1       0         FF   \n",
       "2       2          1      0        0            0       0       0         FT   \n",
       "3       7          0      0        0            1       0       0         FF   \n",
       "4       7          1      0        0            2       1       1         SL   \n",
       "\n",
       "   bat_score_before  field_score  basecode_before  batterid  pitcherid   cid  \n",
       "0                 0            1                0       347       1304  2014  \n",
       "1                 0            0                0       269       1661  2052  \n",
       "2                 0            0                0        43       1048  2029  \n",
       "3                 5            1                1        98       1521  2049  \n",
       "4                 6            1                1       460       1100  2050  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "505d1f24",
   "metadata": {},
   "source": [
    "The ID's are simply keys that are used for player identification, and are irrelevant for modelling purposes. Still, they shouldn't be dropped as they can be used post modelling. For that reason, the original `train` dataframe is preserved.\n",
    "\n",
    "Then, only around ~50,000 samples of each pitch type will progress to the next stage, as to prevent model bias."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "235ac431",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = train.copy()\n",
    "\n",
    "# get least populated pitch size, and take random sample of that amount of pitches of each type \n",
    "sample_size = X_train['pitch_type'].value_counts().values[-1]\n",
    "X_train = X_train.groupby('pitch_type').apply(lambda x: x.sample(sample_size)).reset_index(drop = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "d2e698a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CB    48086\n",
       "CH    48086\n",
       "FF    48086\n",
       "FT    48086\n",
       "SL    48086\n",
       "Name: pitch_type, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train['pitch_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "98742118",
   "metadata": {},
   "outputs": [],
   "source": [
    "assert np.all(X_train['pitch_type'].value_counts().values\\\n",
    "              == X_train['pitch_type'].value_counts().values[0]) # assert all sample sizes are the same now"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "346ebc29",
   "metadata": {},
   "source": [
    "The name of this new dataframe needs to be explained. Given a feature vector X (for each feature x, $X = x_1, x_2,...x_n$) and the label vector, $y$. Subsequently, the X and y dataframes would be split using a `train-test-split`. This procedure will be done later on, but not for this purpose, as the .csv files already separated the train and test sets. For that reason, the new dataframe is essentially the post-split `X_train`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "086b1e95",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train.drop(['batterid','pitcherid','cid'],axis = 1, inplace = True) # proceed with drop"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f133218",
   "metadata": {},
   "source": [
    "Now, the only other column that doesn't belong in the feature space is the label, 'pitch_type'. This is the `y_train` and will be defined as such, then removed from `X_train`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "edc1c1aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train = X_train['pitch_type']\n",
    "X_train.drop(['pitch_type'],axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8facd094",
   "metadata": {},
   "source": [
    "A similar procedure will be done for the test set with additional dropping of the null pitch type dummies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3723d5b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test = test.copy() # copy test\n",
    "X_test.drop(['batterid','pitcherid','cid'],axis = 1, inplace = True) # proceed with drop\n",
    "X_test.drop(['FF','FT','CB','SL','CH'],axis = 1, inplace = True) # proceed with drop"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ef95a7e",
   "metadata": {},
   "source": [
    "For some of the models below, the string pitch types will not be valid labels. Instead, labels of type `int` are required. To remedy this, the pitches will simply be encoded according to the following map: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4e4c5ec4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         4\n",
       "1         4\n",
       "2         4\n",
       "3         4\n",
       "4         4\n",
       "         ..\n",
       "240425    2\n",
       "240426    2\n",
       "240427    2\n",
       "240428    2\n",
       "240429    2\n",
       "Name: pitch_type, Length: 240430, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp = y_train.map({\"FF\":0,\"FT\":1, \"SL\":2, \"CH\":3, \"CB\":4}) # encode\n",
    " \n",
    "y_train = temp.copy()\n",
    "y_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "add07a27",
   "metadata": {},
   "source": [
    "### Procedure/Model Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b7f7b417",
   "metadata": {},
   "outputs": [],
   "source": [
    "# before beginning, filter warnings that appear occasionally due to worker/processor timeout\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46c2182a",
   "metadata": {},
   "source": [
    "Since this data is already split into training and testing sets, there is no need to split it again for that purpose. However, there is a benefit to doing this for another reason: the validation set. \n",
    "\n",
    "The validation set provides an evaluation of the models fit to the data, and allows for hyperparameter tuning before finalization. This is fundamentally analagous to the test set, but is a subset of the training set. It is of the utmost importance to prevent the model from 'seeing' the test set, until final model scoring. In this case, using a validation set for tuning has added benefits; the validation set is labelled as it is a subset of the training set. Therefore, an accuracy score can be determined. This cannot be done for the unlabelled test set."
   ]
  },
  {
   "attachments": {
    "1%20Nv2NNALuokZEcV6hYEHdGA.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "7d939097",
   "metadata": {},
   "source": [
    "![1%20Nv2NNALuokZEcV6hYEHdGA.png](attachment:1%20Nv2NNALuokZEcV6hYEHdGA.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d09d55f6",
   "metadata": {},
   "source": [
    "This will be done implicitly for each model by the `GridSearchCV` objects initialized below. Whenever a `GridSearch` is run for each model, an accuracy score is determined for each cartesian pair of multiple hyperparameters to determine the highest performing options. These hyperparameter options are selected in the `params` dictionaries. This is done with 5-fold cross validation (CV), or iteratively selecting different random selection of training samples to act as a validation set, a procedure that avoids overfitting."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e70c5607",
   "metadata": {},
   "source": [
    "A kNN model will also be fitted on the data. kNN or k-Nearest Neighbors is a non-linear model \"for estimating the likelihood that a data point will become a member of one group or another based on what group the data points nearest to it belong to.\" [source](https://learn.g2.com/k-nearest-neighbor)\n",
    "\n",
    "This includes two types of models: kNN classifier or kNN regressor. The former categorizes a 'best guess' based on the a consensus of the k nearest points, while the latter predicts a continuous variable. For example, a kNN classifier might predict a pitch of being type 10, while a regressor might predict a score of 9.42 for the same pitch.\n",
    "\n",
    "In this case, a classifier is clearly the better choice due to the categorical label of `pitch_type`. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20e531df",
   "metadata": {},
   "source": [
    "\n",
    "One important preliminary step of kNN models is to scale the data. Because these models depend on Euclidean distance, scaling the data prevents that which has much larger scale from overinfluencing the model predictions. In this case, a standard scalar is used.\n",
    "\n",
    "StandardScalar removes variance and reverts data to its z-score $$z = \\frac{x-\\mu}{\\sigma}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6562a6b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "ss = StandardScaler()\n",
    "X_train_scaled = ss.fit_transform(X_train) # fit and transform on training data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9bc01eb",
   "metadata": {},
   "source": [
    "Also for kNN, principle component analysis (PCA) will be used. This method of dimensionality reduction is used \"by projecting each data point onto only the first few principal components to obtain lower-dimensional data while preserving as much of the data's variation as possible\". - [source](https://en.wikipedia.org/wiki/Principal_component_analysis)\n",
    "\n",
    "This helps to mitigate some problems kNN has with high dimensional data, namely the 'Curse of Dimensionality', or inability to predict well in high dimensional spaces."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3a6f38af",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "my_PCA = PCA(n_components=8) # 8 components found to be happy medium preserving performance with significant reduction\n",
    "my_PCA.fit(X_train_scaled) # fit on training \n",
    "X_train_PCA = my_PCA.transform(X_train_scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b73158b6",
   "metadata": {},
   "source": [
    "Now all the data is scaled and ready for euclidean-distance based modelling. A kNN model is fitted below iteratively using different options for various hyperparameters:\n",
    "\n",
    "- `k`: the amount of nearest neighbors to base classification guess off of\n",
    "- `weights`: whether all k-points are weighted the same, or based of distance from point to guess"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c8b8f25a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 20 candidates, totalling 100 fits\n",
      "The best performing hyperparameters are {'n_neighbors': 11, 'weights': 'uniform'} with accuracy score 0.248.\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "knn = KNeighborsClassifier()\n",
    "params = {'n_neighbors': np.arange(2,12,1),'weights': ['uniform', 'distance']}\n",
    "gs = GridSearchCV(knn,param_grid=params,cv = 5,n_jobs = 3,verbose = 1)\n",
    "gs.fit(X_train_PCA,y_train)\n",
    "\n",
    "print(f'The best performing hyperparameters are {gs.best_params_} with accuracy score {gs.best_score_:.3f}.')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77a36295",
   "metadata": {},
   "source": [
    "And viewing the accuracy scores with a visualizaton..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "df208edc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "results = pd.DataFrame(gs.cv_results_)\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(results.loc[results['param_weights'] == 'uniform','mean_test_score'],label = 'uniform')\n",
    "plt.plot(range(0,20,2), results.loc[results['param_weights'] == 'distance','mean_test_score'].values,label = 'distance')\n",
    "plt.xticks(ticks = range(0,20,2), labels = results.loc[results['param_weights'] == 'uniform','param_n_neighbors'].values.astype(int))\n",
    "plt.legend()\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('accuracy')\n",
    "plt.title('kNN Accuracy for Different Values of `k`,`weights`')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85f32194",
   "metadata": {},
   "source": [
    "It's clear that 'uniform' weights outperforms 'distance'as the value of `k` increases. Also, `k` and accuracy score seem to have a direct relationship. To test this, higher values will be used for `k` with fixed uniform scaling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "bb02eb2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 29 candidates, totalling 145 fits\n",
      "The best performing hyperparameters are {'n_neighbors': 283} with accuracy score 0.288.\n"
     ]
    }
   ],
   "source": [
    "knn = KNeighborsClassifier(weights='uniform')\n",
    "params = {'n_neighbors': np.arange(13,300,10)} # higher k's with fixed uniform weights\n",
    "gs = GridSearchCV(knn,param_grid=params,cv = 5,n_jobs = 3,verbose = 1)\n",
    "gs.fit(X_train_PCA,y_train)\n",
    "\n",
    "print(f'The best performing hyperparameters are {gs.best_params_} with accuracy score {gs.best_score_:.3f}.')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4de0d14",
   "metadata": {},
   "source": [
    "It seems that the accuracy score peaks at around 29% for kNN, when using validation set to predict pitch occurrences. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ec759aa",
   "metadata": {},
   "source": [
    "The next model to be trained is a Random Forest. This is an ensemble learning based model that aggregates majority votes of sample classification by polling multiple decision trees at once. This aggregation prevents a singular decision trees tendency to 'learn' training data to closely. The original `X_train` is used as scaling and PCA use is unnecessary. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56c79c38",
   "metadata": {},
   "source": [
    "A RF model fitted below iteratively using CV for hyperparameters:\n",
    "\n",
    "- `n_estimators`: the amount of decision trees to aggregate from\n",
    "- `max_depth`: the max number of splits for each estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "fab3058c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 70 candidates, totalling 350 fits\n",
      "The best performing hyperparameters are {'max_depth': 8, 'n_estimators': 256} with accuracy score 0.309.\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "rf = RandomForestClassifier()\n",
    "\n",
    "dpth = [2**i for i in range(1,7)] # inc powers of two, with instance of no max depth (tree runs until each leaf is one sample)\n",
    "dpth.append(None)\n",
    "\n",
    "params = {\n",
    "    \"n_estimators\":[2**i for i in range(0,10)],\n",
    "    \"max_depth\":dpth\n",
    "    \n",
    "}\n",
    "gs = GridSearchCV(rf,param_grid=params,cv = 5, n_jobs = 3,verbose = 1)\n",
    "gs.fit(X_train,y_train)\n",
    "\n",
    "print(f'The best performing hyperparameters are {gs.best_params_} with accuracy score {gs.best_score_:.3f}.')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "141d59ef",
   "metadata": {},
   "source": [
    "This score mirrors the best performing kNN accuracy. \n",
    "\n",
    "The overall accuracy scores are less than desirable. However, this is somewhat expected due to the nature of what the features are in this dataset! Without information about the specific pitch characteristics, it is an extremely hard and inconsistent task to predict pitch types given a certain ingame situation. In fact, this relation is not a function, as one situation can map to multiple pitch types. In other words, a pitcher can throw pitch in his repertoire for any in game scenerio. Given these particulars about this classification problem, these lower accuracy scores are seen in a different light and being able to gain ~10% accuracy over random guessing (30% vs. 20% or 1/5) is signficant. In essense, this becomes a more computerized version of the cat and mouse game that pitchers and hitters have been playing for generations; there are certainly gamestates that signify a certain pitch will come, but will always be just an educated guess. Then, when pitchers become overly predictable, they can adjust strategy to surprise even the most well-studied of hitters, as in the case of increasingly popular 3-0 breaking ball.\n",
    "\n",
    "The acquirement of specific pitch data would drastically improve performance. More continuous, numeric information about pitch characteristics such as speed, horizontal/vertical break, or spinrate would directly lead to distinguishing a pitch, without multiple possibilities as in this case. This method is a natural continuation as it would be a fundamental shift in this problem of pitch prediction, from probabilistic to deterministic.\n",
    "\n",
    "In testing, this accuracy score could be increased (to about 40%) by using the original non-balanced training set samples, but this might be due to the output, which guessed 'FF' 99,99% of the time. In this way, it was bound to have higher scores due to the myriad of fastballs in the game (and likely the testing set). Though this value is lower, it provides a real prediction - not a response bias.\n",
    "\n",
    "Nevertheless, pitch predictions will proceed with the best performing model with a minimal hyperparameter size - Random Forest. This maximizes the speed of the prediction process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "fd744dbe",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    FF\n",
       "1    SL\n",
       "2    SL\n",
       "3    SL\n",
       "4    SL\n",
       "dtype: object"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# redeclare model with best hyperparams\n",
    "rf = RandomForestClassifier(max_depth=8,n_estimators = 256)\n",
    "\n",
    "# fit on data\n",
    "rf.fit(X_train,y_train)\n",
    "\n",
    "# predict testing data\n",
    "y_test = rf.predict(X_test)\n",
    "\n",
    "# reverse the encoding from earlier \n",
    "temp = pd.Series(y_test).map({0:'FF',1:'FT', 2:\"SL\", 3:\"CH\", 4:\"CB\"}) # decode\n",
    " \n",
    "# copy series that contains pitch predictions\n",
    "y_test = temp.copy()\n",
    "y_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "50f98599",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CH    52673\n",
       "SL    51469\n",
       "CB    22717\n",
       "FT    21224\n",
       "FF    12223\n",
       "dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# more balanced prediction space\n",
    "y_test.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "effa6764",
   "metadata": {},
   "source": [
    "Interestingly, changeup and slider are the most guessed pitches."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "f572f86b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FF</th>\n",
       "      <th>FT</th>\n",
       "      <th>CB</th>\n",
       "      <th>SL</th>\n",
       "      <th>CH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FF  FT  CB  SL  CH\n",
       "0   1   0   0   0   0\n",
       "1   0   0   0   1   0\n",
       "2   0   0   0   1   0\n",
       "3   0   0   0   1   0\n",
       "4   0   0   0   1   0"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# reorder to match original .csv file\n",
    "pred = pd.get_dummies(y_test).iloc[:,[2,3,0,4,1]] \n",
    "pred.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "af3d5bfc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>FF</th>\n",
       "      <th>FT</th>\n",
       "      <th>CB</th>\n",
       "      <th>SL</th>\n",
       "      <th>CH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb  \\\n",
       "0       9          1      0        0            0       0       1   \n",
       "1       9          0      0        0            2       0       0   \n",
       "2       9          0      1        1            1       0       0   \n",
       "3       9          0      0        2            0       0       0   \n",
       "4       9          0      1        2            0       0       0   \n",
       "\n",
       "   bat_score_before  field_score  basecode_before  batterid  pitcherid   cid  \\\n",
       "0                 2            4                0         1       1000  2000   \n",
       "1                 4            2                0         2       1001  2001   \n",
       "2                 4            2                0         3       1001  2001   \n",
       "3                 4            2                0         4       1001  2001   \n",
       "4                 4            2                0         4       1001  2001   \n",
       "\n",
       "   FF  FT  CB  SL  CH  \n",
       "0   1   0   0   0   0  \n",
       "1   0   0   0   1   0  \n",
       "2   0   0   0   1   0  \n",
       "3   0   0   0   1   0  \n",
       "4   0   0   0   1   0  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# plug back into the placeholders\n",
    "for col in pred:\n",
    "    test[col] = pred[col]\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "017cb909",
   "metadata": {},
   "outputs": [],
   "source": [
    "test.to_csv('Q1_pitch_predictions.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
